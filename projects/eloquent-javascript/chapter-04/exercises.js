////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range (start, end, step) {
  var numRange = [];

if (start === end) {
      return numRange;
        }

  
  if (step < 0){
    return numRange;
  }
  if (step === undefined){
    for (let i = start; i <= end; i++) {
    numRange.push(i)
    } 
    }else {
    for (let i = start; i <= end; i += step) {

    numRange.push(i)
    }
    }
  

  
    return numRange;
  }

  //console.log(range(1, 10));
  
  
////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  var total = 0;
  
  while(array.length > 0) {
    total += array.pop();
  }
  return total;
}


console.log(sum(range(1, 10)));


////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array, newArray = []) {
if (array.length === 0){
  return newArray;
}

newArray.unshift(array[0]);

return reverseArray(array.slice(1), newArray)

}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  
    array.reverse();
  
    
    return array;
  }


////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let rest = null;

  for (let i = array.length - 1; i >= 0; i--) {
    rest = {value: array[i], rest: rest};
  }
  return rest;
  
}



////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, output = []) {
  if (list === null){

    return output;
  }
  
    output.push(list.value);
  
  return listToArray(list.rest, output);
  
  
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(number, list) {

  var myObj = {};

  myObj.value = number;
  myObj.rest = list; 

  return myObj;

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, index) {


  if (index < 0) {
    return; 
  }

if (index === 0) {
return list.value;
}



return nth(list.rest, index - 1);
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
 //determine if x AND y are both NOT OBJECTS
 if (typeof x !== 'object' && typeof y !== 'object') {
  return x === y;
}
if (typeof x !== 'object' || typeof y !== 'object') {
  return false;
}

let xKeys = Object.keys(x); //['a', 'b']
let yKeys = Object.keys(y); //['a', 'b', 'c']

if (xKeys.length !== yKeys.length) {
  return false;
}

for (let i = 0; i < xKeys.length; i++) {
  if (!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]])) {
    return false;
  }
}
return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
